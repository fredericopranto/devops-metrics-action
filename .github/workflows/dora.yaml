name: Calculate DORA Metrics

on: 
  push:
  schedule:
  - cron: '30 0 * * *'

jobs:
  update-metrics:
    runs-on: ubuntu-latest
    name: Checking the dora metrics
    steps:
      # To use this repository's private action,
      # you must check out the repository
      - name: Checkout
        uses: actions/checkout@v3
      - name: Dora metrics
        uses: ./ # Uses an action in the root directory
        id: dora
        with:
          owner: 'stenjo'
          repo: 'devops-metrics-action'

      # Use the output from the `dora` step
      - name: Get the output rate
        run: echo "The deploy rate was ${{ steps.dora.outputs.deploy-rate }}"      # Use the output from the `dora` step
      - name: Get the change failure rate
        run: echo "The change failure rate was ${{ steps.dora.outputs.change-failure-rate }}"
      - name: Get the mean time to restore
        run: echo "The mean time to restore was ${{ steps.dora.outputs.mttr }}"

      - name: Get current date
        id: date
        run: |
          echo "date=$(date +'%m-%d')" >> $GITHUB_OUTPUT

      - name: Install jq
        uses: dcarbone/install-jq-action@v1.0.1

      - name: Get Gist
        id: gist
        uses: andymckay/get-gist-action@0.1
        with:
          gistURL: "https://gist.github.com/stenjo/73bb1ba5fe7f17151197d27cfe2d9b41" 

      # Store Deploy Rate history
      - name: Get gist update status
        id: gist-status
        run: |
          deploys=$(jq '[.[]| select(.date == "${{ steps.date.outputs.date }}")] | length > 0' ${{ steps.gist.outputs.file }})
          echo "depl_exists=$deploys" >> "$GITHUB_ENV"
      
      - name: Update json file if date already recorded
        if: ${{ env.depl_exists == 'true' }}
        run: |
          jq '(.[] | select(.date == "${{ steps.date.outputs.date }}") ).rate |= "${{ steps.dora.outputs.deploy-rate }}"' ${{ steps.gist.outputs.file }} >> deploy-rate.json
      
      - name: Store in json file if date is not recorded
        if: ${{ env.depl_exists == 'false' }}
        run: |
          jq '.[. | length] |= . + {"date":"${{ steps.date.outputs.date }}", "rate":"${{ steps.dora.outputs.deploy-rate }}", "target":"7"}' ${{ steps.gist.outputs.file }} >> deploy-rate.json

      - name: Get existing deploy history
        uses: popsiclestick/gist-sync-action@v1.2.0
        id: sync-out
        with:
          auth: ${{ secrets.GIST_AUTH_TOKEN }}
          gist_url: https://gist.github.com/stenjo/73bb1ba5fe7f17151197d27cfe2d9b41
          gist_title: deploy-rate.json
          github_file: ./deploy-rate.json     

      # Store Change Failure Rate
      - name: Gist Actions
        id: gist-cfr
        run: curl -O https://gist.githubusercontent.com/stenjo/73bb1ba5fe7f17151197d27cfe2d9b41/raw/change-failure-rate.json"

      - name: Get gist update status
        id: gist-cfr-status
        run: |
          cfrs=$(jq '[.[]| select(.date == "${{ steps.date.outputs.date }}")] | length > 0' change-failure-rate.json)
          echo "cfr_exists=$cfrs" >> "$GITHUB_ENV"
          mv change-failure-rate.json tmp/change-failure-rate.json
      
      - name: Update json file if date already recorded
        if: ${{ env.cfr_exists == 'true' }}
        run: |
          jq '(.[] | select(.date == "${{ steps.date.outputs.date }}") ).rate |= "${{ steps.dora.outputs.change-failure-rate }}"' tmp/change-failure-rate.json} >> change-failure-rate.json
      
      - name: Store in json file if date is not recorded
        if: ${{ env.cfr_exists == 'false' }}
        run: |
          jq '.[. | length] |= . + {"date":"${{ steps.date.outputs.date }}", "rate":"${{ steps.dora.outputs.change-failure-rate }}", "target":"15"}' tmp/change-failure-rate.json >> change-failure-rate.json

      - name: Get existing deploy history
        uses: popsiclestick/gist-sync-action@v1.2.0
        id: sync-out
        with:
          auth: ${{ secrets.GIST_AUTH_TOKEN }}
          gist_url: https://gist.github.com/stenjo/73bb1ba5fe7f17151197d27cfe2d9b41
          gist_title: change-failure-rate.json
          github_file: ./change-failure-rate.json     
